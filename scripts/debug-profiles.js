import { createClient } from "@supabase/supabase-js";

// Configura√ß√µes do Supabase
const SUPABASE_URL = "https://cqnahwnnqzraqcslljaz.supabase.co";
const SUPABASE_ANON_KEY =
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNxbmFod25ucXpyYXFjc2xsamF6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE0ODE1NDQsImV4cCI6MjA2NzA1NzU0NH0.3lW9juEq0C8Vq737Og56-aXMGVtLfkB58tjYRwKMnhE";

async function debugProfiles() {
  try {
    console.log("üîç INVESTIGANDO TABELA PROFILES");
    console.log("=".repeat(50));

    const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

    // Teste 1: Consulta b√°sica
    console.log("\n1Ô∏è‚É£ Teste 1: Consulta b√°sica");
    const { data: basicData, error: basicError } = await supabase
      .from("profiles")
      .select("*");

    if (basicError) {
      console.log(`‚ùå Erro: ${basicError.message}`);
      console.log(`üìù C√≥digo: ${basicError.code}`);
      console.log(`üìù Detalhes: ${basicError.details}`);
    } else {
      console.log(`‚úÖ Sucesso: ${basicData ? basicData.length : 0} registros`);
    }

    // Teste 2: Contagem
    console.log("\n2Ô∏è‚É£ Teste 2: Contagem de registros");
    const { count, error: countError } = await supabase
      .from("profiles")
      .select("*", { count: "exact", head: true });

    if (countError) {
      console.log(`‚ùå Erro na contagem: ${countError.message}`);
    } else {
      console.log(`üìä Total de registros: ${count}`);
    }

    // Teste 3: Consulta com limite
    console.log("\n3Ô∏è‚É£ Teste 3: Consulta com limite 10");
    const { data: limitData, error: limitError } = await supabase
      .from("profiles")
      .select("*")
      .limit(10);

    if (limitError) {
      console.log(`‚ùå Erro: ${limitError.message}`);
    } else {
      console.log(
        `‚úÖ Registros encontrados: ${limitData ? limitData.length : 0}`
      );
      if (limitData && limitData.length > 0) {
        console.log("\nüìã Primeiros registros:");
        limitData.forEach((profile, index) => {
          console.log(`\nüë§ Perfil ${index + 1}:`);
          console.log(`   ID: ${profile.id}`);
          console.log(`   Nome: ${profile.full_name || "N√£o informado"}`);
          console.log(`   Email: ${profile.email || "N√£o informado"}`);
          console.log(`   Role: ${profile.role || "N√£o definido"}`);
          console.log(`   Criado em: ${profile.created_at || "N√£o informado"}`);
          console.log(
            `   Atualizado em: ${profile.updated_at || "N√£o informado"}`
          );
        });
      }
    }

    // Teste 4: Consulta espec√≠fica por ID
    console.log("\n4Ô∏è‚É£ Teste 4: Tentando consultar por ID espec√≠fico");
    const { data: idData, error: idError } = await supabase
      .from("profiles")
      .select("*")
      .neq("id", "00000000-0000-0000-0000-000000000000"); // Excluir ID inv√°lido

    if (idError) {
      console.log(`‚ùå Erro: ${idError.message}`);
    } else {
      console.log(`‚úÖ Registros v√°lidos: ${idData ? idData.length : 0}`);
    }

    // Teste 5: Verificar estrutura da tabela
    console.log("\n5Ô∏è‚É£ Teste 5: Verificar estrutura da tabela");
    const { data: structureData, error: structureError } = await supabase
      .from("profiles")
      .select("id, full_name, email, role, created_at, updated_at")
      .limit(1);

    if (structureError) {
      console.log(`‚ùå Erro na estrutura: ${structureError.message}`);
    } else {
      console.log(
        `‚úÖ Estrutura v√°lida: ${
          structureData ? structureData.length : 0
        } registros`
      );
    }

    // Teste 6: Consulta com autentica√ß√£o
    console.log("\n6Ô∏è‚É£ Teste 6: Verificar sess√£o atual");
    const {
      data: { session },
      error: sessionError,
    } = await supabase.auth.getSession();

    if (sessionError) {
      console.log(`‚ùå Erro na sess√£o: ${sessionError.message}`);
    } else {
      console.log(`üìä Sess√£o: ${session ? "Ativa" : "N√£o autenticado"}`);
      if (session) {
        console.log(`üë§ Usu√°rio: ${session.user.email}`);
      }
    }

    console.log("\n‚ú® Investiga√ß√£o conclu√≠da!");
  } catch (error) {
    console.error("‚ùå Erro inesperado:", error);
  }
}

debugProfiles();
